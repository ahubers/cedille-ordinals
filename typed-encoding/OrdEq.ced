import stdlib.

import Ordinal-03.

module ordEq.

data OrdEq: Ord ➔ Ord ➔ ★ =
  | zEq : OrdEq zer zer
  | sucEq : ∀ a: Ord. ∀ b: Ord. OrdEq a b ➔ OrdEq (suc a) (suc b)
  | limEq : ∀ l1: Nat ➔ Ord. ∀ l2: Nat ➔ Ord. (∀ n: Nat. OrdEq (l1 n) (l2 n)) ➔ OrdEq (lim l1) (lim l2).

-- A proof that ordinal a is equal to itself.
refl : Π a: Ord. OrdEq a a = λ a. μ ih. a {
     | zer ➔ zEq
     | suc a' ➔ sucEq -(to/Ord -isType/ih a') -(to/Ord -isType/ih a') (ih a')
     | lim l ➔ limEq
		-(λ x. to/Ord -isType/ih (l x))
		-(λ x. to/Ord -isType/ih (l x))
	        Λ n. ●
}.


-- data OrdLt : Ord ➔ Ord ➔ ★ =
--   | zLt : OrdLt zer zer
--   | sucLt : ●
--   | limlt : ●.
